paste("Combined: mu =", round(mu_tweedie_full, 2), ", phi =", phi_tweedie_full, ", xi =", round(optimal_xi_full, 2))
), col = c("blue", "red", "darkgreen"), lty = c(1, 1, 2))
# Plot for Treatment Group
plot(ecdf_treatment, main = "Treatment Group empricical CDF and Fitted CDFs", xlab = "Score", ylab = "CDF", col = "blue", verticals = TRUE, do.points = FALSE)
lines(x_values, cdf_values_treatment, col = "red", lty = 1)
lines(x_values, cdf_values_full_treatment, col = "darkgreen", lty = 2)
legend("bottomright", legend = c(
paste("empricial"),
paste("Treatment only: mu =", round(mu_tweedie_treatment, 2), ", phi =", phi_tweedie_treatment, ", xi =", round(optimal_xi_treatment, 2)),
paste("Combined: mu =", round(mu_tweedie_full_treatment, 2), ", phi =", phi_tweedie_full, ", xi =", round(optimal_xi_full, 2))
), col = c("blue", "red", "darkgreen"), lty = c(1, 1, 2))
# Plot for Control Group
par(mfrow = c(2, 1))  # Set layout to have 2 plots, one above the other
plot(ecdf_control, main = "Control Group emprical CDF and Fitted CDFs", xlab = "Score", ylab = "CDF", col = "blue", verticals = TRUE, do.points = FALSE)
lines(x_values, cdf_values_control, col = "red", lty = 1)
lines(x_values, cdf_values_full_control, col = "darkgreen", lty = 2)
legend("bottomright", legend = c(
paste("Empricial "),
paste("Control only: mu =", round(mu_tweedie_control, 2), ", phi =", phi_tweedie_control, ", xi =", round(optimal_xi_control, 2)),
paste("Combined: mu =", round(mu_tweedie_full, 2), ", phi =", phi_tweedie_full, ", xi =", round(optimal_xi_full, 2))
), col = c("blue", "red", "darkgreen"), lty = c(1, 1, 2))
# Plot for Treatment Group
plot(ecdf_treatment, main = "Treatment Group empricical CDF and Fitted CDFs", xlab = "Score", ylab = "CDF", col = "blue", verticals = TRUE, do.points = FALSE)
lines(x_values, cdf_values_treatment, col = "red", lty = 1)
lines(x_values, cdf_values_full_treatment, col = "darkgreen", lty = 2)
legend("bottomright", legend = c(
paste("Empricial"),
paste("Treatment only: mu =", round(mu_tweedie_treatment, 2), ", phi =", phi_tweedie_treatment, ", xi =", round(optimal_xi_treatment, 2)),
paste("Combined: mu =", round(mu_tweedie_full_treatment, 2), ", phi =", phi_tweedie_full, ", xi =", round(optimal_xi_full, 2))
), col = c("blue", "red", "darkgreen"), lty = c(1, 1, 2))
load("inflated_gamma_700")
ls()
load("inflated_gamma_700")
load("inflated_gamma_700.RData")
ls()
trial_indices
trial_mu_estimates
trial_mu_estimates[[1]]
plot(trial_mu_estimates[[1]])
summary(trial_mu_estimates[[1]])
differences <- lapply(trial_mu_estimates[[trial_index]] , function(element) element.1 - element-2)
differences <- lapply(trial_mu_estimates[[trial_index]] , function(element) element[[1]] - element[[2]])
trial_index <- 1
differences <- lapply(trial_mu_estimates[[trial_index]] , function(element) element[[1]] - element[[2]])
differences
plot(differences)
hist(differences)
(differences)
differences <- unlist(lapply(trial_mu_estimates[[trial_index]] , function(element) element[[1]] - element[[2]]))
hist(differences)
real_trial_index <- trial_indices[[trial_index]]
source("R/simulations/models/inflated_gamma_simulations.R")
source("R/simulations/method_evaluation/inflated_gamma_simulations.R")
source("R/simulations/method_evaluation/zero_inflated_gamma_functions.R")
trial <- trials[[real_trial_index]]
ls()
trial <- trial_data$trials[[real_trial_index]]
trial
get_mean_estimate(trial)
# Load required functions
source("R/trials/trial_simulation.R")
source("R/simulations/method_evaluation/density_methods.R")
#"Scenario_3_k_1.5_l_3.5.csv"
#Scenario_2_k_1.5_s_0.5.csv
file <- "Scenario_2_k_1.5_s_0.5.csv"
# Load trial data
trial_data <- load_trial_data(file)
trial_data_1 <- trial_data$trials[[3]]
#install.packages("gamlss")
library(gamlss)
mymodel <- gamlss(Score ~ Group, sigma.formula = ~ Group, nu.formula = ~ Group,
family=ZAGA ,data=trial_data_1)
summary(mymodel)
dist_from_model <- function(gamlss_model,  x =  seq(-10,600,by=0.1)){
mu_coefficients <- coef(gamlss_model, what = "mu")
sigma_coefficients <- coef(gamlss_model, what = "sigma")
nu_coefficients <- coef(gamlss_model, what = "nu")
logit_inv <- function(x){1/(1+exp(-x))}
mu_control <- exp(mu_coefficients[1])
sigma_control <- exp(sigma_coefficients[1])
nu_control <- logit_inv(nu_coefficients[1])
mu_treatment <- exp(sum(mu_coefficients))
sigma_treatment <- exp(sum(sigma_coefficients))
nu_treatment <- logit_inv(sum(nu_coefficients))
p_control <- pZAGA(x, mu = mu_control, sigma = sigma_control, nu = nu_control)
p_treatment <- pZAGA(x, mu = mu_treatment, sigma = sigma_treatment, nu = nu_treatment)
return(list(x=x,control=p_control,treatment=p_treatment))
}
p_values_from_model <- function(gamlss_model){
model_summary <- summary(gamlss_model)
mu_p_val <- model_summary[2,4]
sigma_p_val <-  model_summary[4,4]
nu_p_pal <- model_summary[6,4]
p_values <- c("mu"=  mu_p_val , "sigma" = sigma_p_val , nu = nu_p_pal)
return(p_values)
}
p_values <- p_values_from_model(mymodel)
p_dist <-  dist_from_model(mymodel)
plot(-100,0, xlim = c(-10,600), ylim=c(0,1))
color <- rgb(0, 0, 1, alpha = 0.04)
color_legend <- rgb(0, 0, 1, alpha = 0.8)
n_it <- 100
x =  seq(-10,600,by=0.1)
distributions.c <- list()
distributions.t <- list()
for(i in seq_along(trial_data$trials)){
if(i> n_it){ break }
trial <- trial_data$trials[[i]]
mymodel <- gamlss(Score ~ Group, sigma.formula = ~ Group, nu.formula = ~ Group,
family=ZAGA ,data=trial)
dist <- dist_from_model(mymodel,x=x)
distributions.c[[i]] <- dist$control
distributions.t[[i]] <- dist$treatment
}
all_data <- trial_data$all_data()
# control plot
matplot(x, do.call(cbind, distributions.c), type = "l", lty = 1, col = color,
xlim = c(-10, 200), ylim = c(0, 1),
main = "",
xlab = "Score", ylab = "P(x<=X)")
lines(ecdf(all_data[all_data$Group=="control",1]))
library(ggplot2)
library(dplyr)
library(tidyr)
library(latex2exp)
# Define the rescale_x function
rescale_x <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Define the map_labels function
map_labels <- function(x) {
model_labels <- c(
ANOVA = "$ANOVA$",
tweedie = "Tweedie Regression",
quantile_regression = "Median Regression",
anova_c_0.001 = "Log-ANOVA $$$_{c=0.001}$",
anova_c_1 = "Log-ANOVA $$$_{c=1}$"
)
if (x %in% names(model_labels)) {
return(model_labels[[x]])
} else {
return(x)
}
}
# Define the plot handler function
p_value_plot_handler <- function() {
data <- data.frame()
model_names <- c()
colors <- c()
add <- function(model_p_values, model_name, color = "black") {
model_p_values <- sort(model_p_values)
x <- rescale_x(1:length(model_p_values))
stopifnot(x>=0 & x<=1)
model_names <<- c(model_names, model_name)
colors <<- c(colors, color)
model_data <- data.frame(
p_value = model_p_values,
rescaled_id = x,
model = model_name
)
data <<- rbind(data, model_data)
}
plot <- function() {
ggplot(data, aes(x = p_value, y = rescaled_id, group = model)) +
geom_line(aes(color = model, linetype = model), size = 1.1) +
labs(x = "P-Value", y = "CDF", title = "") +
theme_minimal() +
theme(
legend.position = c(0.99, 0.01),
legend.justification = c(1, -0.1),
legend.title = element_blank(),
legend.text = element_text(size = 15),
legend.box.just = "left",
axis.text = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 16, face = "bold")
) +
scale_color_manual(values = colors[order(model_names)],
labels = lapply(sort(model_names), function(x) TeX(map_labels(x)))) +
scale_linetype_manual(values = setNames(1:length(model_names), model_names),
labels = lapply(sort(model_names), function(x) TeX(map_labels(x)))) +
geom_vline(xintercept = 0.05, linetype = "dashed", color = "red") +
annotate("text", x = 0.1, y = -0, label = "0.05", angle = 0, color = "red")+
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black")
}
return(list(plot = plot, add = add))
}
source("R/methods/run_methods.R")
source("R/methods/methods_settings.R")
#load("perm_test_longer.RData")
#model_file <- "Scenario_3_k_1.5_l_3.5.csv"
load("perm_test_shorter.RData")
model_file <- "Scenario_2_k_1.5_s_0.5.csv"
p_values <- get_values(model_file, "p_value")
names(p_values)
# Example usage
handler <- p_value_plot_handler()
handler$add(p_values$lm, "ANOVA", "darkgreen")
handler$add(p_values$anova_c_0.001, "Log-ANOVA $$$_{c=0.001}$", "navy")
handler$add(p_values$anova_c_1, "Log-ANOVA $$$_{c=1}$", "royalblue4")
handler$add(p_values$tweedie, "Tweedie Regression", "blue")
handler$add(p_values$quantile_regression, "Median Regression", "orange")
handler$add(permutations_tests, "Permutation Test", "red")
handler$plot()
print(plot)
load_trial_data(model_file)
trial_data <- load_trial_data(model_file)
anova_30 <- function(trial){
trial <- trial[c(1:30,101:130),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- trial_data$apply_to_each(anova_30)
p_values_30
p_values_30 <- unlist(p_values_30)
handler$add(p_values_30, "Anova 30", "red")
handler$plot()
model_file <- "Scenario_1_k_1.5.csv"
trial_data <- load_trial_data(model_file)
anova_30 <- function(trial){
trial <- trial[c(1:30,101:130),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, "Anova 30", "red")
handler$plot()
model_file <- "Scenario_1_k_1.5.csv"
trial_data <- load_trial_data(model_file)
anova_30 <- function(trial){
trial <- trial[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, "Anova 30", "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
lm_model <- lm(Score ~ Group, data = trial_1)
summary <- summary(lm_model)
summary
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
anova_30 <- function(trial){
trial <- trial[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, "Anova 10", "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
group_size <- 5
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:100+group_size),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
model_file <- "Scenario_2_k_1.5_s_0.5.csv"
trial_data <- load_trial_data(model_file)
group_size <- 5
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:100+group_size),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
group_size <- 20
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:100+group_size),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
model_file <- "Scenario_1_k_1.5.csv"
trial_data <- load_trial_data(model_file)
group_size <- 20
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:100+group_size),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
group_size <- 20
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:(100+group_size)),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
101:100+5
101:100
model_file <- "Scenario_2_k_1.5_s_0.5.csv"
#model_file <- "Scenario_1_k_1.5.csv"
trial_data <- load_trial_data(model_file)
group_size <- 20
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:(100+group_size)),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
#model_file <- "Scenario_2_k_1.5_s_0.5.csv"
model_file <- "Scenario_1_k_1.5.csv"
trial_data <- load_trial_data(model_file)
group_size <- 20
anova_30 <- function(trial){
trial <- trial[c(1:group_size,101:(100+group_size)),]
lm_model <- lm(Score ~ Group, data = trial)
summary <- summary(lm_model)
p_value <- summary$coefficients[2, 4]
return(p_value)
}
p_values_30 <- unlist(trial_data$apply_to_each(anova_30))
handler <- p_value_plot_handler()
handler$add(p_values_30, paste0("Anova ",group_size), "red")
handler$plot()
trial_1 <- trial_data$trials[[1]]
trial_1 <- trial_1[c(1:10,101:110),]
lm_model <- lm(Score ~ Group, data = trial_1)
summary(lm_model)
source("R/models/model_results.R")
source("R/models/model_settings.R")
for(size in c(20,50)){
file <- paste0("data/workspaces/eqaul_samples_same_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
print(p_value_plot$plot())
p_value_plot$save(paste0("p_values_equal_sample_size_",size,".pdf"))
}
library(ggplot2)
source("R/models/model_results.R")
source("R/models/model_settings.R")
library(ggplot2)
for(size in c(20,50)){
file <- paste0("data/workspaces/eqaul_samples_same_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
print(p_value_plot$plot())
p_value_plot$save(paste0("p_values_equal_sample_size_",size,".pdf"))
}
source("R/models/model_results.R")
source("R/models/model_settings.R")
library(ggplot2)
for(size in c(20,50)){
file <- paste0("data/workspaces/eqaul_samples_same_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
print(p_value_plot$plot())
p_value_plot$save(paste0("p_values_equal_sample_size_",size,".pdf"))
}
source("R/models/model_results.R")
source("R/models/model_settings.R")
library(ggplot2)
for(size in c(20,30,50)){
file <- paste0("data/workspaces/equal_samples_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
print(p_value_plot$plot())
p_value_plot$save(paste0("p_values_equal_sample_size_",size,".pdf"))
}
for(size in c(20,30,50,100)){
file <- paste0("data/workspaces/longer_samples_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
p_value_plot$plot()
p_value_plot$save(paste0("p_values_longer_sample_size_",size,".pdf"))
}
library(statmod)
library(tweedie)
x <- seq(1,100,by=0.1)
mutrue <- exp(-1+x/25)
summary(mutrue)
y <- rtweedie(length(x), mu=mutrue, phi=1, power=1.3)
summary(y)
sum(y==0)
fit <- glm(y ~ 1, family=tweedie(var.power=1.3, link.power=0))
mean(y==0)
for(size in c(20,30,50,100)){
file <- paste0("data/workspaces/longer_samples_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
p_value_plot$plot()
p_value_plot$save(paste0("p_values_longer_sample_size_",size,".pdf"))
}
1+1
source("R/models/model_results.R")
source("R/models/model_settings.R")
library(ggplot2)
for(size in c(100)){ #20,30,50,
file <- paste0("data/workspaces/longer_samples_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
p_value_plot$plot()
p_value_plot$save(paste0("p_values_longer_sample_size_",size,".pdf"))
}
file <- paste0("data/workspaces/longer_samples_", size, ".RData")
load(file, envir =  (data_env <- environment()))
result <- init_model_results(data_env$result)
p_values <- result$get_values("p_value")
p_value_plot <- p_value_plot_handler()
for(name in names(p_values)){
p_value_plot$add(p_values[[name]], name)
}
print(p_value_plot$plot())
p_value_plot$save(paste0("p_values_longer_sample_size_",size,".pdf"))
}
